NOTA: [...] = testo non riportato, rimasto immutato
	... = testo mancante da aggiungere

###
# 1 INTRO

#1.2 tools
-aggiunte precisazioni sull'esperimento monte carlo
-aggiunto riferimento ad articolo di testa

@@@
1.2
Tools used
In order to solve the optimization problem we have used basic MATLAB func-
tionalities and the Optimization toolboxes.Regarding the theoretical part, we have used the knowledge of cost coupled optimization principles presented in the Bullo’s book [1] and in the paper by Testa & Notarstefano[2] ; various tries were carried out by doing a Montecarlo sim-
ulation for task 1, with various combinations of agents number and agent's dimensino, and for task 2,with an increasing number of agents and positions of this ones and of tasks randomized inside an interval decided
by the user(typically a square of side 1).


##############################################
#1.5 contributions
 generatore del problema copiato, non ha senso citarlo.
 T1: 	-incompleto.
     	-aggiunte precisazioni sui grafici
 T2: 	-incompleto.

 ->forse sarebbe meglio spostare i punti 2,3,4 nel paragrafo 1.2 non essendo veri contributi, ma 1.5 perderebbe ogni senso di esistere

@@@ DA COMPLETARE
1.5
Contributions
We have developed some MATLAB simulations in order to show the algorithm
working. As a first effort, starting from the code provided as teaching material, we integrated it in an unified script, more usefull for the automatic generation of data for both the tasks, based on the parameters given by the user, for example agents' number and dimension and graph topology and communication level for both tasks, shape, dimensions of the spaw region, constraints on task's assignability to robot for the second.
The scripts for performing monte carlo experiments for both tasks...


...
In the first task we simulated the convergence error of agents and tasks under
the constraint of ... and compared them to a centralized algorithm solution. In
the second task we simulated a similar situation but with an added graphical
representation.

########################################################à

###
# 2 CONSTR COUPL LIN PROB
- aggiunta breve intro

@@@
2
Constrained coupled linear problems

The task assignment problem can be formulated as this particular class of linear problems; in this chapter, we'll present a brief introduction to the underneath theory that let us solve the problem. Given a cost function,separable with respect to agents, each of them defined in a particular subset, and a set of equality constraints, the problem can be formulated as 
	{formule}

[...]

#2.1 
-aggiunta breve descizione

@@@
2.1
Distributed Dual Subgradient algorithm

In the cases where the gradient cannot be calculated, it is possible to use the subgradient method; this algorithm can be implemented in a distributed fashion to solve the constrained coupled optimization problem.
[...]
############################################################


###
# 3 DISTR CONSTR COUPL PROBL

#3.2 assumptions
-aggiunti dettagli sulla generazione dei dati

3.2
Assumptions for the execution

[...]

In the deployed code we generate the above matrices by means of the function progen, which, utilizing the generation techniques provided in [2],  produces the said matrices by means of the number of agents N and the number of state components of the agents M. Therefore the problem
is considered to be defined and can be solved by means of the linear program theory recalled at the beginning of the chapter.
Inside the dual subgradient algorithm,we made use of the linprog function in order to solve the minimization problem exposed in equation (27) and then, applying the results, we are able to finally solve our constrained coupled linear problem obtaining the optimal values of the decision variables for each agent.


###################################################
aggiunto: #3.3 simulation and results
--scaletta paragrafo::

-caratteristiche monte carlo: variabili:N,M
- caratteristiche codice: generazione del codice,
			  generazione risultati
			  interpretazioni
- caratteristiche esperimenti presi in esame
- grafico media errore costo dual/primal RA (e %)
- grafico costo dual/primal/dRA/pRA più caratteristico
- grafico media errore consenso

3.3 Simulation and results of Monte Carlo experiments for Task 1
 A series of Monte Carlo trials have been performed to extract meaningfull statistical indicators for the presented algorithm. While the code permitted to also vary graph characteristics, only the number of agents and their dimension (expressed in term of minimal and maximal "surplus" with respect to agent dimension) were varied.
The implemented code simply re-runned the single trial one previously tested and exported data in form of workspace variables and plots for cost and consensus error.

Each experiments (i.e. an experimet with constant characteristics) is repeated a constant amount of times; the results obtained are then feeded to a scripts that averages them, on the total number of repetitions for each experiment. Results of this procedure are provided in form of plots of running average cost  relative error(with respect to centralized solution cost, computed via the matlab linprog() function), of primal and dual costs, and consensus error

		{running average cost error plot}

The results of consensus error show a clear and fast convergence for the agents.
			{consensus error plot}

The results of relative errors generally low,seems a bit high for some combinations, but this is due to the low number of experiment repetitions (<10); most characteristic result for a single, non averaged, experiment are provided to show the capabilities of the code.

	{single, most characteristic non averaged cost error plot}


###########################################################

###
# 4 

# 4.2 problem solution
-precisazioni sulla zona di spawn
-precisazioni sul risolutore

4.2
Problem solution
The environment where task and robots are spawned is, by default, bi-dimensional (the code may generate 3d environments too) and assumed to be a square of side 1 (another option is a circle with radius 1.) Both
tasks and robots are spawned randomly inside this space.
To solve the local minimization problem inside the dual subgradient algorithm we make use of the linprog function in
MATLAB. This function takes as inputs:
x = linprog(f,A,b,Aeq,beq,lb,ub,options) [...]

###################################################################
# 4.3 simulation ad retults (DA COMPLETARE)

4.3 Simulation and results of Monte Carlo experiments for Task Assignment Problem

A single experiment for task assignment problem is provided as result.

			{plot: cost error}

			{plot: consensus error}

The plot of cost  clearly show the correctness of the solution, since the curves converges fast to centralized solution value; consensus error curves as well converge fast for all the agents.
			{plot: assignment}
			

###
# 5 CONCLUSIONS AND DEVELOPMENTS

->toglierei



###
# REFERENCES

-aggiunto riferimento a Testa&Notastefano

References
[1] Francesco Bullo. Lectures on Network Systems. Kindle Direct Publishing,
2020.

[2] Andrea Testa, Giuseppe Notarstefano. Generalize Assignment for Multi-Robot Systems via Distributed Branch-and-Price . 2020
